blueprint:
  name: Desirable Weather Monitor
  description: Monitor weather sensors to prompt users to open or close windows and doors based on desirable ranges.
  domain: automation
  input:
    outside_temperature_sensor:
      name: Outside temperature sensor
      description: Sensor that provides the temperature outside.
      selector:
        entity:
          domain: sensor
    inside_temperature_sensor:
      name: Inside temperature sensor
      description: Sensor that provides the temperature inside.
      selector:
        entity:
          domain: sensor
    min_temperature:
      name: Minimum desirable temperature
      description: Minimum temperature that is desirable outside and inside.
      selector:
        number:
          unit_of_measurement: °F
          mode: slider
          min: -50
          max: 120
          step: 1
          default: 68
    max_temperature:
      name: Maximum desirable temperature
      description: Maximum temperature that is desirable outside and inside.
      selector:
        number:
          unit_of_measurement: °F
          mode: slider
          min: -50
          max: 120
          step: 1
          default: 72
    outside_humidity_sensor:
      name: Outside humidity sensor
      description: Sensor that provides the humidity outside.
      selector:
        entity:
          domain: sensor
    inside_humidity_sensor:
      name: Inside humidity sensor
      description: Sensor that provides the humidity inside.
      selector:
        entity:
          domain: sensor
    min_humidity:
      name: Minimum desirable humidity
      description: Minimum humidity that is desirable outside and inside.
      selector:
        number:
          unit_of_measurement: '%'
          mode: slider
          min: 0
          max: 100
          step: 1
          default: 40
    max_humidity:
      name: Maximum desirable humidity
      description: Maximum humidity that is desirable outside and inside.
      selector:
        number:
          unit_of_measurement: '%'
          mode: slider
          min: 0
          max: 100
          step: 1
          default: 60
    open_window_action:
      name: Open window action
      description: Action to take when windows and doors need to be opened.
      selector:
        action: {}
    close_window_action:
      name: Close window action
      description: Action to take when windows and doors need to be closed.
      selector:
        action: {}
  source_url: https://github.com/benholtz/benholtz-homeassistant

variables:
  last_notification_time: "1970-01-01T00:00:00.000000+00:00"

trigger:
  - platform: time_pattern
    minutes: "/15"
condition:
  # Check if the outside temperature is outside the desirable range for at least 15 minutes
  - condition: template
    value_template: >-
      {% set outside_temp = states(input.outside_temperature_sensor) | float %}
      {% set inside_temp = states(input.inside_temperature_sensor) | float %}
      {% set outside_humidity = states(input.outside_humidity_sensor) | float %}
      {% set inside_humidity = states(input.inside_humidity_sensor) | float %}
      {% set min_temp = input.min_temperature | float %}
      {% set max_temp = input.max_temperature | float %}
      {% set min_humidity = input.min_humidity | float %}
      {% set max_humidity = input.max_humidity | float %}
      {% set window_open = is_state('binary_sensor.window', 'on') or is_state('binary_sensor.door', 'on') %}
      {% set notification_threshold = as_timestamp(now()) - as_timestamp(last_notification_time) >= 3600 %}
      {% if outside_temp < min_temp or outside_temp > max_temp or outside_humidity < min_humidity or outside_humidity > max_humidity %}
        {% if not window_open and notification_threshold %}
          {% set last_notification_time = now() %}
          true
        {% endif %}
      {% elif window_open and notification_threshold %}
        {% set last_notification_time = now() %}
        true
      {% endif %}
      
action:
  - choose:
      # Open windows and doors
      - conditions:
          - condition: template
            value_template: "{{ states(input.outside_temperature_sensor) | float < input.min_temperature | float }}"
          - condition: template
            value_template: "{{ not is_state('binary_sensor.window', 'on') }}"
          - condition: template
            value_template: "{{ not is_state('binary_sensor.door', 'on') }}"
        sequence:
          - service: input.open_window_action

      # Close windows and doors
      - conditions:
          - condition: template
            value_template: "{{ states(input.outside_temperature_sensor) | float > input.max_temperature | float }}"
          - condition: template
            value_template: "{{ is_state('binary_sensor.window', 'on') or is_state('binary_sensor.door', 'on') }}"
        sequence:
          - service: input.close_window_action

      # Send a notification if the windows and doors are closed and the temperature is still not within the desirable range
      - conditions:
          - condition: template
            value_template: >-
              {% set outside_temp = states(input.outside_temperature_sensor) | float %}
              {% set inside_temp = states(input.inside_temperature_sensor) | float %}
              {% set outside_humidity = states(input.outside_humidity_sensor) | float %}
              {% set inside_humidity = states(input.inside_humidity_sensor) | float %}
              {% set min_temp = input.min_temperature | float %}
              {% set max_temp = input.max_temperature | float %}
              {% set min_humidity = input.min_humidity | float %}
              {% set max_humidity = input.max_humidity | float %}
              {% set window_open = is_state('binary_sensor.window', 'on') or is_state('binary_sensor.door', 'on') %}
              {% set notification_threshold = as_timestamp(now()) - as_timestamp(last_notification_time) >= 3600 %}
              {% if (outside_temp < min_temp or outside_temp > max_temp or outside_humidity < min_humidity or outside_humidity > max_humidity) and not window_open and notification_threshold %}
                {% set last_notification_time = now() %}
                true
              {% endif %}
        sequence:
          - service: persistent_notification.create
            data:
              title: "Desirable Weather Monitor"
              message: >-
                {% set outside_temp = states(input.outside_temperature_sensor) | float %}
                {% set inside_temp = states(input.inside_temperature_sensor) | float %}
                {% set outside_humidity = states(input.outside_humidity_sensor) | float %}
                {% set inside_humidity = states(input.inside_humidity_sensor) | float %}
                {% set min_temp = input.min_temperature | float %}
                {% set max_temp = input.max_temperature | float %}
                {% set min_humidity = input.min_humidity | float %}
                {% set max_humidity = input.max_humidity | float %}
                {% if outside_temp < min_temp %}
                  The outside temperature is {{ outside_temp }}°F, which is below the desirable range of {{ min_temp }}°F to {{ max_temp }}°F. Please consider opening windows and doors.
                {% elif outside_temp > max_temp %}
                  The outside temperature is {{ outside_temp }}°F, which is above the desirable range of {{ min_temp }}°F to {{ max_temp }}°F. Please consider closing windows and doors.
                {% elif window_open %}
                  The outside temperature is within the desirable range, but windows and doors are open. Please consider closing them.
                {% endif %}


